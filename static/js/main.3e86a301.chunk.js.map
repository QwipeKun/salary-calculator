{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","salaryPerHour","setSalaryPerHour","totalHours","setTotalHours","mounthSalary","setMounthSalary","yearPerSalary","setYearPerSalary","activeInput","setActiveInput","useEffect","Math","ceil","className","type","placeholder","value","onChange","event","Number","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA0EeA,MAvEf,WACE,MAAwCC,mBAAS,GAAjD,mBAAKC,EAAL,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,KAA3C,mBAAKG,EAAL,KAAiBC,EAAjB,KACA,EAAsCJ,mBAAS,GAA/C,mBAAKK,EAAL,KAAmBC,EAAnB,KACA,EAAwCN,mBAAS,GAAjD,mBAAKO,EAAL,KAAoBC,EAApB,KACA,EAAoCR,mBAAS,MAA7C,mBAAKS,EAAL,KAAkBC,EAAlB,KA4BA,OA1BAC,qBAAU,WAER,OAAOF,GACL,IAAK,gBACL,IAAK,aACHH,EAAgBL,EAAgBE,GAChCK,EAAkBP,EAAgBE,EAAc,IAChD,MACA,IAAK,eACDA,IACFD,EAAiBU,KAAKC,KAAKR,EAAeF,IAC1CK,EAAgC,GAAfH,IAEnB,MACA,IAAK,gBACHC,EAAgBM,KAAKC,KAAKN,EAAgB,KAC1CL,EAAiBU,KAAKC,KAAKN,EAAgB,GAAKJ,IAKlDO,EAAe,QAEnB,CAACT,EAAeE,EAAYE,EAAcE,IAK5C,sBAAKO,UAAY,gBAAjB,UACE,qBAAKA,UAAY,SAAjB,8IAGE,qBAAKA,UAAY,YAAjB,SACE,sBAAKA,UAAY,QAAjB,UACA,qBAAKA,UAAY,aAAjB,yGACA,uBAAOA,UAAY,aAAaC,KAAO,OAAOC,YAAc,8FAAmBC,MAAShB,EAAeiB,SAAY,SAACC,GAChHT,EAAe,iBACfR,EAAiBkB,OAAOD,EAAME,OAAOJ,WAGzC,qBAAKH,UAAY,YAAjB,0LACA,uBAAOA,UAAY,aAAaC,KAAO,OAAQC,YAAc,+KAAmCC,MAASd,EAAYe,SAAY,SAACC,GAChIT,EAAe,cACfN,EAAcgB,OAAOD,EAAME,OAAOJ,WAGpC,qBAAKH,UAAY,YAAjB,oGACA,uBAAOA,UAAY,aAAaC,KAAO,OAAOC,YAAc,yFAAmBC,MAASZ,EAAca,SAAY,SAACC,GAC/GT,EAAe,gBACfJ,EAAgBc,OAAOD,EAAME,OAAOJ,WAGxC,qBAAKH,UAAY,YAAjB,8FACA,uBAAOA,UAAY,aAAaC,KAAO,OAAOC,YAAc,6EAAiBC,MAASV,EAAeW,SAAY,SAACC,GAC9GT,EAAe,iBACfF,EAAiBY,OAAOD,EAAME,OAAOJ,oBCrDlCK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3e86a301.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './App.css' \n\nfunction App() {\n  let [salaryPerHour, setSalaryPerHour] = useState(0)\n  let [totalHours, setTotalHours] = useState(170) \n  let [mounthSalary, setMounthSalary] = useState(0)\n  let [yearPerSalary, setYearPerSalary] = useState(0)\n  let [activeInput, setActiveInput] = useState(null) \n  \n  useEffect(() => {\n    const activeLocalInput = activeInput\n    switch(activeInput){\n      case 'salaryPerHour': \n      case 'totalHours':\n        setMounthSalary(salaryPerHour * totalHours)\n        setYearPerSalary((salaryPerHour * totalHours) * 12)\n        break\n        case 'mounthSalary': \n        if (totalHours){\n          setSalaryPerHour(Math.ceil(mounthSalary / totalHours))\n          setYearPerSalary(mounthSalary * 12)\n        }\n        break\n        case 'yearPerSalary':\n          setMounthSalary(Math.ceil(yearPerSalary / 12))\n          setSalaryPerHour(Math.ceil(yearPerSalary / 12 / totalHours))\n          break\n          default: \n          break\n        }\n        setActiveInput(null)\n  }, \n    [salaryPerHour, totalHours, mounthSalary, yearPerSalary]\n  )\n\n  return(\n  \n  <div className = \"mainContainer\">\n    <div className = \"header\">\n      Расчитай свою зарпалату\n    </div>\n      <div className = \"container\">\n        <div className = \"items\">\n        <div className = \"textInput1\">Почасовая ставка</div>\n        <input className = \"fieldInput\" type = \"text\" placeholder = \"Почасовая ставка\" value = {salaryPerHour} onChange = {(event) => {\n            setActiveInput('salaryPerHour')\n            setSalaryPerHour(Number(event.target.value))\n          }\n        }/>\n        <div className = \"textInput\">Количество рабочих часов в месяц</div>\n        <input className = \"fieldInput\" type = \"text\"  placeholder = \"Количество рабочих часов в месяц\" value = {totalHours} onChange = {(event) => {\n          setActiveInput('totalHours')\n          setTotalHours(Number(event.target.value))\n          }\n        }/>\n        <div className = \"textInput\">Зарплата в месяц</div>\n        <input className = \"fieldInput\" type = \"text\" placeholder = \"Зарплата в месяц\" value = {mounthSalary} onChange = {(event) => {\n            setActiveInput('mounthSalary')\n            setMounthSalary(Number(event.target.value))\n          }\n        }/>\n        <div className = \"textInput\">Зарплата за год</div>\n        <input className = \"fieldInput\" type = \"text\" placeholder = \"Зарплата в год\" value = {yearPerSalary} onChange = {(event) => {\n            setActiveInput('yearPerSalary')\n            setYearPerSalary(Number(event.target.value))\n          }\n        }/>\n      </div>\n    </div>\n  </div>\n)\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}